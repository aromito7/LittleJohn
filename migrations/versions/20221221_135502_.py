"""empty message

Revision ID: 676630c4b1a9
Revises:
Create Date: 2022-12-21 13:55:02.836632

"""
from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")

# revision identifiers, used by Alembic.
revision = '676630c4b1a9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('account_value', sa.Float(), nullable=False),
    sa.Column('buying_power', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )

    if environment == "production":
            op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")


    op.create_table('stocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('symbol', sa.String(length=10), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('open', sa.Float(), nullable=False),
    sa.Column('history', sa.String(), nullable=False),
    sa.Column('is_up', sa.Boolean(), nullable=False),
    sa.Column('delta', sa.Float(), nullable=False),

    sa.Column('name', sa.String()),
    sa.Column('about', sa.String()),
    sa.Column('average_volume', sa.Float()),
    sa.Column('city', sa.Float()),
    sa.Column('day_high', sa.Float()),
    sa.Column('day_low', sa.Float()),
    sa.Column('employees', sa.Integer()),
    sa.Column('eps', sa.Float()),
    sa.Column('industry', sa.String()),
    sa.Column('market_cap', sa.BigInteger()),
    sa.Column('news', sa.String()),
    sa.Column('sector', sa.String()),
    sa.Column('shares', sa.Integer()),
    sa.Column('state', sa.String(2)),
    sa.Column('volume', sa.Integer()),
    sa.Column('website', sa.String()),
    sa.Column('year_high', sa.Float()),
    sa.Column('year_low', sa.Float()),

    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    if environment == "production":
        op.execute(f"ALTER TABLE stocks SET SCHEMA {SCHEMA};")


    op.create_table('portfolios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('stock_symbol', sa.String(length=20), nullable=False),
    sa.Column('average_price', sa.Float(), nullable=False),
    sa.Column('shares', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['stock_id'], ['stocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    if environment == "production":
        op.execute(f"ALTER TABLE portfolios SET SCHEMA {SCHEMA};")

    op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('stock_symbol', sa.String(length=20), nullable=False),
    sa.Column('shares', sa.Integer(), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('order_type', sa.String(), nullable=False),
    sa.Column('is_open', sa.Boolean(), nullable=False),
    sa.Column('close_datetime', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['stock_id'], ['stocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    if environment == "production":
        op.execute(f"ALTER TABLE transactions SET SCHEMA {SCHEMA};")

    op.create_table('transfers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    if environment == "production":
        op.execute(f"ALTER TABLE transfers SET SCHEMA {SCHEMA};")


    op.create_table('watchlists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('stock_symbol', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['stock_id'], ['stocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    if environment == "production":
        op.execute(f"ALTER TABLE transfers SET SCHEMA {SCHEMA};")


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('watchlist')
    op.drop_table('transfers')
    op.drop_table('transactions')
    op.drop_table('portfolios')
    op.drop_table('stocks')
    op.drop_table('users')

    # ### end Alembic commands ###
